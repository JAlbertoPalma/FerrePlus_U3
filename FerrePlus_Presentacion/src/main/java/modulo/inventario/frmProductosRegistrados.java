/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package modulo.inventario;

import Control.ControlGUI;
import DTO.ProductoDTO;
import excepciones.NegocioException;
import excepciones.PersistenciaException;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author joelr
 */
public class frmProductosRegistrados extends javax.swing.JFrame {

    GridBagConstraints gbc = new GridBagConstraints();
    List<ProductoDTO> productos;
    int auxEstado = 0; //Define en que operaci√≥n esta: 0 para ninguna, 1 para buscar.
    int aux = 1; //Auxiliar requerido para los botones siguiente y atras
    int filaSeleccionada = 0; //Fila seleccionada de la tabla, se requiere para actualizar y eliminar.
    int index = 1; //Define en que pagina se encuentra la tabla
    int min = 1; // El minimo de la lista de productos, requerido para el boton atras.
    int max = 0; // El maximo de la lista de productos, requerido para el boton siguiente.
    int procedencia = 0; //Define si viene de ventas o compras, 0 para normal, 1 para ventas, 2 para compras.

    /**
     * Creates new form RegistrarProductoGUI
     */
    public frmProductosRegistrados() throws NegocioException {
        initComponents();
        this.setExtendedState(frmProductosRegistrados.MAXIMIZED_BOTH);
        this.inicial();
        this.AcomodarContenido();

        this.combobox();
    }

    public frmProductosRegistrados(int procedencia) throws NegocioException {
        initComponents();
        this.setExtendedState(frmProductosRegistrados.MAXIMIZED_BOTH);
        this.procedencia = procedencia;
        this.inicial();
        this.AcomodarContenido();

        this.combobox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFondo = new javax.swing.JPanel();
        jButtonVolver = new javax.swing.JButton();
        lblsku = new javax.swing.JLabel();
        jScrollPaneProductos = new javax.swing.JScrollPane();
        jTableProductos = new javax.swing.JTable();
        txtSKU = new javax.swing.JTextField();
        lblCategoria = new javax.swing.JLabel();
        txtCategoria = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        jComboBoxEstado = new javax.swing.JComboBox<>();
        jButtonEliminar = new javax.swing.JButton();
        jButtonFiltrar = new javax.swing.JButton();
        jButtonAtras = new javax.swing.JButton();
        jButtonActualizar = new javax.swing.JButton();
        jButtonBuscar = new javax.swing.JButton();
        jButtonSiguiente = new javax.swing.JButton();
        jButtonConfirmar = new javax.swing.JButton();
        pnlTitulo = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlFondo.setBackground(new java.awt.Color(255, 204, 153));
        pnlFondo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlFondoMouseClicked(evt);
            }
        });
        pnlFondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonVolver.setBackground(new java.awt.Color(255, 204, 153));
        jButtonVolver.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonVolver.setText("Volver");
        jButtonVolver.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 580, 130, 40));

        lblsku.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblsku.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblsku.setText("SKU:");
        pnlFondo.add(lblsku, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 480, 110, -1));

        jTableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "SKU", "Nombre", "Categoria", "Medida", "PrecVenta", "PrecCompra", "Stock", "Proveedor", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProductos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableProductosFocusLost(evt);
            }
        });
        jTableProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProductosMouseClicked(evt);
            }
        });
        jScrollPaneProductos.setViewportView(jTableProductos);
        if (jTableProductos.getColumnModel().getColumnCount() > 0) {
            jTableProductos.getColumnModel().getColumn(0).setResizable(false);
            jTableProductos.getColumnModel().getColumn(1).setResizable(false);
            jTableProductos.getColumnModel().getColumn(2).setResizable(false);
            jTableProductos.getColumnModel().getColumn(3).setResizable(false);
            jTableProductos.getColumnModel().getColumn(4).setResizable(false);
            jTableProductos.getColumnModel().getColumn(5).setResizable(false);
            jTableProductos.getColumnModel().getColumn(6).setResizable(false);
            jTableProductos.getColumnModel().getColumn(7).setResizable(false);
            jTableProductos.getColumnModel().getColumn(8).setResizable(false);
        }

        pnlFondo.add(jScrollPaneProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 890, -1));

        txtSKU.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSKU.setPreferredSize(new java.awt.Dimension(200, 50));
        pnlFondo.add(txtSKU, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 490, 190, 22));

        lblCategoria.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblCategoria.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCategoria.setText("Categoria:");
        lblCategoria.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlFondo.add(lblCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 520, 140, -1));

        txtCategoria.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCategoria.setPreferredSize(new java.awt.Dimension(200, 50));
        pnlFondo.add(txtCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 530, 120, 22));

        lblEstado.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblEstado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEstado.setText("Estado:");
        pnlFondo.add(lblEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 590, 100, -1));

        jComboBoxEstado.setPreferredSize(new java.awt.Dimension(150, 40));
        pnlFondo.add(jComboBoxEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 600, 120, 22));

        jButtonEliminar.setBackground(new java.awt.Color(255, 204, 153));
        jButtonEliminar.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 630, 130, 40));

        jButtonFiltrar.setBackground(new java.awt.Color(255, 204, 153));
        jButtonFiltrar.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonFiltrar.setText("Filtrar");
        jButtonFiltrar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrarActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonFiltrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 530, 130, 40));

        jButtonAtras.setBackground(new java.awt.Color(255, 204, 153));
        jButtonAtras.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonAtras.setText("Atras");
        jButtonAtras.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtrasActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonAtras, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 680, 130, 40));

        jButtonActualizar.setBackground(new java.awt.Color(255, 204, 153));
        jButtonActualizar.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonActualizar.setText("Actualizar");
        jButtonActualizar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 580, 130, 40));

        jButtonBuscar.setBackground(new java.awt.Color(255, 204, 153));
        jButtonBuscar.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonBuscar.setText("Buscar");
        jButtonBuscar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 530, 130, 40));

        jButtonSiguiente.setBackground(new java.awt.Color(255, 204, 153));
        jButtonSiguiente.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonSiguiente.setText("Siguiente");
        jButtonSiguiente.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSiguienteActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonSiguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 630, 130, 40));

        jButtonConfirmar.setText("Confirmar");
        jButtonConfirmar.setBackground(new java.awt.Color(255, 204, 153));
        jButtonConfirmar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonConfirmar.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonConfirmar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 680, 130, 40));

        getContentPane().add(pnlFondo, java.awt.BorderLayout.CENTER);

        pnlTitulo.setBackground(new java.awt.Color(255, 153, 102));
        pnlTitulo.setDoubleBuffered(false);
        pnlTitulo.setPreferredSize(new java.awt.Dimension(400, 105));
        pnlTitulo.setLayout(new java.awt.GridBagLayout());

        lblTitulo.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 36)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Menu Inventario");
        pnlTitulo.add(lblTitulo, new java.awt.GridBagConstraints());

        getContentPane().add(pnlTitulo, java.awt.BorderLayout.PAGE_START);
        pnlTitulo.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed
        if (auxEstado == 1) {

            this.jButtonBuscar.setVisible(true);
            this.jButtonActualizar.setVisible(true);
            this.jButtonEliminar.setVisible(true);
            try {
                this.inicial();
            } catch (NegocioException ex) {
                Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
            }

            auxEstado = 0;
        } else {
            if (procedencia == 0) {
                ControlGUI.getInstancia().mostrarMenuProducto();
                this.dispose();
            }
            if (procedencia == 1) {
                try {
                    ControlGUI.getInstancia().mostrarRegistrarVenta();
                    this.dispose();
                } catch (NegocioException ex) {
                    Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (procedencia == 2) {
                try {
                    ControlGUI.getInstancia().mostrarRegistrarCompra();
                    this.dispose();
                } catch (NegocioException ex) {
                    Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

    }//GEN-LAST:event_jButtonVolverActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        if (auxEstado == 0) {

            this.jButtonFiltrar.setText("Eliminar");
            this.jButtonEliminar.setVisible(true);
            String id = Integer.toString(filaSeleccionada);
            System.out.println(id);
            try {
                String nombre = this.jTableProductos.getValueAt(filaSeleccionada, 1).toString();
                System.out.println(nombre);
                ControlGUI.getInstancia().EliminarProducto(ControlGUI.getInstancia().obtenerProductoPorNombre(nombre).getId());
                JOptionPane.showMessageDialog(rootPane, "Registro Eliminado con exito");
                this.inicial();
            } catch (NegocioException | PersistenciaException ex) {
                Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrarActionPerformed
        this.jButtonFiltrar.setVisible(true);
        boolean aux = false;
        if (this.jComboBoxEstado.getItemAt(this.jComboBoxEstado.getSelectedIndex()).equalsIgnoreCase("Habilitado")) {
            aux = true;
        } else {
            aux = false;
        }
        try {
            this.jTableProductos.setModel(this.LlenarTablaFiltro(this.txtSKU.getText(), this.txtCategoria.getText(), aux));
        } catch (NegocioException ex) {
            Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonFiltrarActionPerformed

    private void jButtonAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtrasActionPerformed
        index--;
        aux = aux - 8;
        boolean aux = false;
        if (this.jComboBoxEstado.getItemAt(this.jComboBoxEstado.getSelectedIndex()).equalsIgnoreCase("Habilitado")) {
            aux = true;
        } else {
            aux = false;
        }
        if (this.auxEstado == 1) {
            try {
                this.LlenarTablaFiltro(this.txtSKU.getText(), this.txtCategoria.getText(), aux);
            } catch (NegocioException ex) {
                Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                this.LlenarTabla();
            } catch (NegocioException ex) {
                Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButtonAtrasActionPerformed

    private void jButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarActionPerformed
        if (auxEstado == 0) {
            try {
                String nombre = this.jTableProductos.getValueAt(filaSeleccionada, 1).toString();
                ControlGUI.getInstancia().mostrarActualizarProducto(ControlGUI.getInstancia().obtenerProductoPorNombre(nombre).getNombre());
                this.dispose();
            } catch (NegocioException ex) {
                Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButtonActualizarActionPerformed

    private void jTableProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProductosMouseClicked
        if (auxEstado == 1) {
            this.jButtonEliminar.setVisible(false);
            this.jButtonActualizar.setVisible(false);
        } else if (auxEstado == 0) {
            filaSeleccionada = this.jTableProductos.getSelectedRow();
            this.jButtonEliminar.setVisible(true);
            this.jButtonActualizar.setVisible(true);
        }
    }//GEN-LAST:event_jTableProductosMouseClicked

    private void jTableProductosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableProductosFocusLost

    }//GEN-LAST:event_jTableProductosFocusLost

    private void pnlFondoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlFondoMouseClicked
        if (filaSeleccionada >= 0) {
            this.jTableProductos.clearSelection();
            this.jButtonActualizar.setVisible(false);
            this.jButtonEliminar.setVisible(false);

        }
    }//GEN-LAST:event_pnlFondoMouseClicked

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        if (auxEstado == 1) {

        } else {
            this.buscar();
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSiguienteActionPerformed
        index++;
        aux = aux + 8;
        boolean aux = false;
        if (this.jComboBoxEstado.getItemAt(this.jComboBoxEstado.getSelectedIndex()).equalsIgnoreCase("Habilitado")) {
            aux = true;
        } else {
            aux = false;
        }
        if (this.auxEstado == 1) {
            try {
                this.LlenarTablaFiltro(this.txtSKU.getText(), this.txtCategoria.getText(), aux);
            } catch (NegocioException ex) {
                Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                this.LlenarTabla();
            } catch (NegocioException ex) {
                Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonSiguienteActionPerformed

    private void jButtonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarActionPerformed
        
        String nombre = this.jTableProductos.getValueAt(filaSeleccionada, 1).toString();
        try {
            if (procedencia == 1) {
                ControlGUI.getInstancia().mostrarProductoVendido(ControlGUI.getInstancia().obtenerProductoPorNombre(nombre).getId());
            this.dispose();
            }
            if (procedencia == 2) {
                ControlGUI.getInstancia().mostrarProductoComprado(ControlGUI.getInstancia().obtenerProductoPorNombre(nombre).getId());
                this.dispose();
            }
            
        } catch (NegocioException ex) {
            Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonConfirmarActionPerformed
    private void AcomodarContenido() throws NegocioException {

        this.pnlFondo.setLayout(new GridBagLayout()); // Permite centrar componentes dentro

        gbc.gridy = 0; // Todos estar√°n en la misma fila (fila 0), se incrementa para mover a la siguiente fila.
        gbc.insets = new Insets(5, 5, 5, 5); // Margen alrededor del componente
        gbc.fill = GridBagConstraints.HORIZONTAL; // Centrado en la celda
        gbc.weightx = 1.0; // Espacio extra para centrar horizontalmente

        // Columna 1
        gbc.gridx = 1;
        gbc.gridy = 0;
//        gbc.fill = GridBagConstraints.BOTH; // Alarga la tabla con el tama√±o.
        this.jTableProductos.setModel(this.LlenarTabla());
        JTableHeader header = new JTableHeader(this.jTableProductos.getColumnModel());
        this.pnlFondo.add(header, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jTableProductos, gbc);
        this.jTableProductos.setPreferredSize(new Dimension(750, 750));
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonAtras, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonSiguiente, gbc);

//         Columna 2
        gbc.gridx = 2;
        gbc.gridy = 0;

        this.pnlFondo.add(this.jButtonBuscar, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonFiltrar, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonActualizar, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonEliminar, gbc);
        gbc.gridy++;
        if (procedencia == 1 || procedencia == 2) {
            this.pnlFondo.add(this.jButtonConfirmar,gbc);
            gbc.gridy++;
        }
        this.pnlFondo.add(this.jButtonVolver, gbc);
        gbc.gridy++;

    }

    // Metodo para llenar la tabla de Productos.
    public DefaultTableModel LlenarTabla() throws NegocioException {

        // Esto es para despues, con los botones siguiente y atras
        max = this.contarPaginas(ControlGUI.getInstancia().ObtenerProductos().size());
        List<ProductoDTO> productosObtenidos = this.calcular();
        this.ocultarBotones();
        //Tabla
        DefaultTableModel model = (DefaultTableModel) this.jTableProductos.getModel();
        model.setRowCount(0); // Limpiar todas las filas existentes en la tabla
        for (int i = 0; i < productosObtenidos.size(); i++) {
            ProductoDTO producto = productosObtenidos.get(i);
            String estados;
            if (producto.getEstado().equals(true)) {
                estados = "Habilitado";
            } else {
                estados = "Deshabilitado";
            }
            model.addRow(new Object[]{
                producto.getSKU(),
                producto.getNombre(),
                producto.getCategoria(),
                producto.getUnidadMedida(),
                producto.getPrecioVenta(),
                producto.getPrecioCompraReferencial(),
                producto.getStock(),
                producto.getProveedor(),
                estados
            });
        }
        return model;
    }

    // Metodo para llenar la tabla de Productos.
    public DefaultTableModel LlenarTablaFiltro(String sku, String categoria, boolean estado) throws NegocioException {
        if (categoria.equalsIgnoreCase("") && sku.equalsIgnoreCase("")) {
            this.LlenarTabla();
        } else {
            max = this.contarPaginas(ControlGUI.getInstancia().obtenerProductosFiltro(sku, categoria, estado).size());
            List<ProductoDTO> productosObtenidos = this.calcularFiltros(sku, categoria, estado);
            this.ocultarBotones();
            //Tabla
            DefaultTableModel model = (DefaultTableModel) this.jTableProductos.getModel();
            model.setRowCount(0); // Limpiar todas las filas existentes en la tabla

            try {
                for (int i = 0; i < productosObtenidos.size(); i++) {
                    ProductoDTO producto = productosObtenidos.get(i);
                    String estados;
                    if (producto.getEstado().equals(true)) {
                        estados = "Habilitado";
                    } else {
                        estados = "Deshabilitado";
                    }
                    model.addRow(new Object[]{
                        producto.getSKU(),
                        producto.getNombre(),
                        producto.getCategoria(),
                        producto.getUnidadMedida(),
                        producto.getPrecioVenta(),
                        producto.getPrecioCompraReferencial(),
                        producto.getStock(),
                        producto.getProveedor(),
                        estados
                    });
                    return model;
                }
            } catch (NullPointerException np) {
                JOptionPane.showMessageDialog(rootPane, "No se encontro ningun producto");
                throw new NullPointerException("No se encontro ningun producto");
            }
        }
        return null;

    }

    public void combobox() {
        this.jComboBoxEstado.addItem("Habilitado");
        this.jComboBoxEstado.addItem("Deshabilitado");
    }

    public int contarPaginas(int nPaginas) {
        int totalPaginas = (int) Math.ceil((double) nPaginas / 8);
        return totalPaginas;
    }

    public void inicial() throws NegocioException {
        this.lblsku.setVisible(false);
        this.lblCategoria.setVisible(false);
        this.lblEstado.setVisible(false);
        this.jScrollPaneProductos.setVisible(false);
        this.txtSKU.setVisible(false);
        this.txtCategoria.setVisible(false);
        this.jComboBoxEstado.setVisible(false);
        this.jButtonFiltrar.setVisible(false);
        this.jButtonActualizar.setVisible(false);
        this.jButtonEliminar.setVisible(false);

//        this.jTableProductos.setModel(this.LlenarTabla());
    }

    public void buscar() {
        this.auxEstado = 1;
        this.lblsku.setVisible(true);
        this.lblCategoria.setVisible(true);
        this.lblEstado.setVisible(true);
        this.txtSKU.setVisible(true);
        this.txtCategoria.setVisible(true);
        this.jComboBoxEstado.setVisible(true);
        this.jButtonBuscar.setVisible(false);
        this.jButtonActualizar.setVisible(false);
        this.jButtonEliminar.setVisible(false);
        this.jButtonFiltrar.setVisible(true);

        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        this.pnlFondo.add(this.lblsku, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.txtSKU, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.lblCategoria, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.txtCategoria, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.lblEstado, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jComboBoxEstado, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonFiltrar, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonVolver, gbc);
    }

    public List<ProductoDTO> calcular() throws NegocioException {
        List<ProductoDTO> productosObtenidos = ControlGUI.getInstancia().ObtenerProductos();
        List<ProductoDTO> productos = new ArrayList<>();
        try {
            productos.add(productosObtenidos.get(aux - 1));
            productos.add(productosObtenidos.get(aux));
            productos.add(productosObtenidos.get(aux + 1));
            productos.add(productosObtenidos.get(aux + 2));
            productos.add(productosObtenidos.get(aux + 3));
            productos.add(productosObtenidos.get(aux + 4));
            productos.add(productosObtenidos.get(aux + 5));
            productos.add(productosObtenidos.get(aux + 6));
        } catch (IndexOutOfBoundsException e) {
            throw new IndexOutOfBoundsException("Se paso del rango pero no pasa nada :D ");
        } finally {
            return productos;
        }
    }

    public List<ProductoDTO> calcularFiltros(String sku, String categoria, boolean estado) throws NegocioException {
        List<ProductoDTO> productosObtenidosFiltro = ControlGUI.getInstancia().obtenerProductosFiltro(sku, categoria, estado);
        List<ProductoDTO> productos = new ArrayList<>();
        try {
            productos.add(productosObtenidosFiltro.get(aux - 1));
            productos.add(productosObtenidosFiltro.get(aux));
            productos.add(productosObtenidosFiltro.get(aux + 1));
            productos.add(productosObtenidosFiltro.get(aux + 2));
            productos.add(productosObtenidosFiltro.get(aux + 3));
            productos.add(productosObtenidosFiltro.get(aux + 4));
            productos.add(productosObtenidosFiltro.get(aux + 5));
            productos.add(productosObtenidosFiltro.get(aux + 6));
        } catch (IndexOutOfBoundsException e) {
            throw new IndexOutOfBoundsException("Se paso del rango pero no pasa nada :D ");

        } finally {
            return productos;
        }

    }

    public void ocultarBotones() {

        if (index == max) {
            this.jButtonSiguiente.setVisible(false);

        } else {
            this.jButtonSiguiente.setVisible(true);

        }

        if (index == min) {
            this.jButtonAtras.setVisible(false);

        } else {
            this.jButtonAtras.setVisible(true);

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmProductosRegistrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmProductosRegistrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmProductosRegistrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmProductosRegistrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new frmProductosRegistrados().setVisible(true);
                } catch (NegocioException ex) {
                    Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonAtras;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonConfirmar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonFiltrar;
    private javax.swing.JButton jButtonSiguiente;
    private javax.swing.JButton jButtonVolver;
    private javax.swing.JComboBox<String> jComboBoxEstado;
    private javax.swing.JScrollPane jScrollPaneProductos;
    private javax.swing.JTable jTableProductos;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblsku;
    private javax.swing.JPanel pnlFondo;
    private javax.swing.JPanel pnlTitulo;
    private javax.swing.JTextField txtCategoria;
    private javax.swing.JTextField txtSKU;
    // End of variables declaration//GEN-END:variables

}
