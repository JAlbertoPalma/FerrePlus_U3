/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.Ventas;

import GUI.Compras.*;
import modulo.inventario.*;
import Control.ControlGUI;
import DTO.DetalleVentaDTO;
import DTO.ProductoDTO;
import DTO.VentaDTO;
import excepciones.NegocioException;
import excepciones.PersistenciaException;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author joelr
 */
public class frmConsultarVentas extends javax.swing.JFrame {

    GridBagConstraints gbc = new GridBagConstraints();
    List<ProductoDTO> productos;
    int aux = 1; //Auxiliar requerido para los botones siguiente y atras de Compras.
    int index = 1; //Define en que pagina se encuentra la tabla de Compras.
    int min = 1; // El minimo de la lista de productos, requerido para el boton atras de Compras.
    int max = 0; // El maximo de la lista de productos, requerido para el boton siguiente de Compras.
    int aux2 = 1; //Auxiliar requerido para los botones siguiente y atras de Detalles.
    int index2 = 1; //Define en que pagina se encuentra la tabla de Detalles.
    int min2 = 1; // El minimo de la lista de productos, requerido para el boton atras de Detalles.
    int max2 = 0; // El maximo de la lista de productos, requerido para el boton siguiente de Detalles.
    int filaSeleccionada = 0; //Fila seleccionada de la tabla, se requiere para eliminar.

    /**
     * Creates new form RegistrarProductoGUI
     */
    public frmConsultarVentas() throws NegocioException {
        initComponents();
        this.setExtendedState(frmConsultarVentas.MAXIMIZED_BOTH);
        this.AcomodarContenido();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFondo = new javax.swing.JPanel();
        jButtonVolver = new javax.swing.JButton();
        lblEstado = new javax.swing.JLabel();
        jScrollPaneProductos = new javax.swing.JScrollPane();
        jTableVentas = new javax.swing.JTable();
        txtNombreProducto = new javax.swing.JTextField();
        lblFechaInicio = new javax.swing.JLabel();
        jButtonCancelar = new javax.swing.JButton();
        lblFechaFin = new javax.swing.JLabel();
        lblFolio = new javax.swing.JLabel();
        txtFolio = new javax.swing.JTextField();
        jButtonConfirmar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProductosVentas = new javax.swing.JTable();
        jButtonAtras = new javax.swing.JButton();
        jButtonSiguiente = new javax.swing.JButton();
        jButtonAtras2 = new javax.swing.JButton();
        jButtonSiguiente2 = new javax.swing.JButton();
        datePickerFin = new com.github.lgooddatepicker.components.DateTimePicker();
        datePickerInicio = new com.github.lgooddatepicker.components.DateTimePicker();
        jComboBoxEstado = new javax.swing.JComboBox<>();
        lblNombreProducto = new javax.swing.JLabel();
        pnlTitulo = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlFondo.setBackground(new java.awt.Color(204, 255, 204));
        pnlFondo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlFondoMouseClicked(evt);
            }
        });
        pnlFondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonVolver.setText("Volver");
        jButtonVolver.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonVolver.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 580, 130, 40));

        lblEstado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEstado.setText("Estado");
        lblEstado.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        pnlFondo.add(lblEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 770, 210, -1));

        jTableVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Folio", "FechaHora", "Subtotal", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableVentas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableVentasFocusLost(evt);
            }
        });
        jTableVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableVentasMouseClicked(evt);
            }
        });
        jScrollPaneProductos.setViewportView(jTableVentas);
        if (jTableVentas.getColumnModel().getColumnCount() > 0) {
            jTableVentas.getColumnModel().getColumn(0).setResizable(false);
            jTableVentas.getColumnModel().getColumn(1).setResizable(false);
            jTableVentas.getColumnModel().getColumn(2).setResizable(false);
            jTableVentas.getColumnModel().getColumn(3).setResizable(false);
        }

        pnlFondo.add(jScrollPaneProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 890, -1));

        txtNombreProducto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNombreProducto.setPreferredSize(new java.awt.Dimension(200, 50));
        pnlFondo.add(txtNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 490, 190, 22));

        lblFechaInicio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFechaInicio.setText("Fecha Inicio:");
        lblFechaInicio.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblFechaInicio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlFondo.add(lblFechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 560, 170, -1));

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonCancelar.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 580, 130, 40));

        lblFechaFin.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblFechaFin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFechaFin.setText("Fecha Fin:");
        lblFechaFin.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlFondo.add(lblFechaFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 600, 170, -1));

        lblFolio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFolio.setText("Folio: ");
        lblFolio.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        pnlFondo.add(lblFolio, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 510, 210, -1));

        txtFolio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFolio.setPreferredSize(new java.awt.Dimension(200, 50));
        pnlFondo.add(txtFolio, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 520, 190, 22));

        jButtonConfirmar.setText("Confirmar");
        jButtonConfirmar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonConfirmar.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonConfirmar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 530, 130, 40));

        jTableProductosVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Cantidad", "Descuentos", "Venta", "FolioVenta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableProductosVentas);
        if (jTableProductosVentas.getColumnModel().getColumnCount() > 0) {
            jTableProductosVentas.getColumnModel().getColumn(0).setResizable(false);
            jTableProductosVentas.getColumnModel().getColumn(1).setResizable(false);
            jTableProductosVentas.getColumnModel().getColumn(2).setResizable(false);
            jTableProductosVentas.getColumnModel().getColumn(3).setResizable(false);
            jTableProductosVentas.getColumnModel().getColumn(4).setResizable(false);
        }

        pnlFondo.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 670, -1, -1));

        jButtonAtras.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonAtras.setText("Atras");
        jButtonAtras.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtrasActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonAtras, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 630, 130, 40));

        jButtonSiguiente.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonSiguiente.setText("Siguiente");
        jButtonSiguiente.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSiguienteActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonSiguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 630, 130, 40));

        jButtonAtras2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonAtras2.setText("Atras");
        jButtonAtras2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAtras2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtras2ActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonAtras2, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 700, 130, 40));

        jButtonSiguiente2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButtonSiguiente2.setText("Siguiente");
        jButtonSiguiente2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonSiguiente2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSiguiente2ActionPerformed(evt);
            }
        });
        pnlFondo.add(jButtonSiguiente2, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 650, 130, 40));
        pnlFondo.add(datePickerFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 610, -1, -1));
        pnlFondo.add(datePickerInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 570, -1, -1));

        jComboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Confirmada", "Cancelada" }));
        pnlFondo.add(jComboBoxEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 780, -1, -1));

        lblNombreProducto.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblNombreProducto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNombreProducto.setText("Nombre Producto: ");
        pnlFondo.add(lblNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 480, 210, -1));

        getContentPane().add(pnlFondo, java.awt.BorderLayout.CENTER);

        pnlTitulo.setBackground(new java.awt.Color(51, 102, 0));
        pnlTitulo.setDoubleBuffered(false);
        pnlTitulo.setPreferredSize(new java.awt.Dimension(400, 105));
        pnlTitulo.setLayout(new java.awt.GridBagLayout());

        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Consultar Ventas");
        lblTitulo.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 36)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        pnlTitulo.add(lblTitulo, new java.awt.GridBagConstraints());

        getContentPane().add(pnlTitulo, java.awt.BorderLayout.PAGE_START);
        pnlTitulo.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed

        ControlGUI.getInstancia().mostrarMenuVentas();
        this.dispose();


    }//GEN-LAST:event_jButtonVolverActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed

            try {
                String nombre = this.jTableVentas.getValueAt(filaSeleccionada, 0).toString();
                System.out.println(nombre);
                ControlGUI.getInstancia().cancelarVenta(ControlGUI.getInstancia().obtenerVentaFolio(nombre));
                JOptionPane.showMessageDialog(rootPane, "Registro Cancelado con exito");
                this.LlenarTablaDetallesInicial();
            } catch (NegocioException ex) {
                Logger.getLogger(frmProductosRegistrados.class.getName()).log(Level.SEVERE, null, ex);
            }

    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jTableVentasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVentasMouseClicked

        filaSeleccionada = this.jTableVentas.getSelectedRow();
        this.jButtonCancelar.setVisible(true);
    }//GEN-LAST:event_jTableVentasMouseClicked

    private void jTableVentasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableVentasFocusLost

    }//GEN-LAST:event_jTableVentasFocusLost

    private void pnlFondoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlFondoMouseClicked
        if (filaSeleccionada >= 0) {
            this.jButtonCancelar.setVisible(false);

        }
    }//GEN-LAST:event_pnlFondoMouseClicked

    private void jButtonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarActionPerformed
         boolean estado;
            if (this.jComboBoxEstado.getSelectedItem().equals("Confirmada")) {
                estado = true;
            }else{
                estado = false;
            }
        try {
            this.LlenarTablaFiltro(this.datePickerInicio.getDateTimePermissive() ,
                    this.datePickerFin.getDateTimePermissive() ,
                    this.txtFolio.getText() ,
                    this.txtNombreProducto.getText() ,
                    estado);
            this.LlenarTablaDetallesFiltro(this.datePickerInicio.getDateTimePermissive() ,
                    this.datePickerFin.getDateTimePermissive() ,
                    this.txtFolio.getText() ,
                    this.txtNombreProducto.getText() ,
                    estado);
        } catch (NegocioException ex) {
            Logger.getLogger(frmConsultarVentas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonConfirmarActionPerformed

    private void jButtonAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtrasActionPerformed
        index--;
        aux = aux - 8;
        try {
            boolean estado;
            if (this.jComboBoxEstado.getSelectedItem().equals("Confirmada")) {
                estado = true;
            }else{
                estado = false;
            }
            this.LlenarTablaFiltro(this.datePickerInicio.getDateTimePermissive() ,
                    this.datePickerFin.getDateTimePermissive() ,
                    this.txtFolio.getText() ,
                    this.txtNombreProducto.getText() ,
                    estado);
        } catch (NegocioException ex) {
            Logger.getLogger(frmConsultarCompras.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonAtrasActionPerformed

    private void jButtonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSiguienteActionPerformed
        index++;
        aux = aux + 8;

        try {
            boolean estado;
            if (this.jComboBoxEstado.getSelectedItem().equals("Confirmada")) {
                estado = true;
            }else{
                estado = false;
            }
            this.LlenarTablaFiltro(this.datePickerInicio.getDateTimePermissive() ,
                    this.datePickerFin.getDateTimePermissive() ,
                    this.txtFolio.getText() ,
                    this.txtNombreProducto.getText() ,
                    estado);
        } catch (NegocioException ex) {
            Logger.getLogger(frmConsultarCompras.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSiguienteActionPerformed

    private void jButtonAtras2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtras2ActionPerformed
        index2--;
        aux2 = aux2 - 8;
        try {
             boolean estado;
            if (this.jComboBoxEstado.getSelectedItem().equals("Confirmada")) {
                estado = true;
            }else{
                estado = false;
            }
            this.LlenarTablaDetallesFiltro(this.datePickerInicio.getDateTimePermissive() ,
                    this.datePickerFin.getDateTimePermissive() ,
                    this.txtFolio.getText() ,
                    this.txtNombreProducto.getText() ,
                    estado);
        } catch (NegocioException ex) {
            Logger.getLogger(frmConsultarCompras.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonAtras2ActionPerformed

    private void jButtonSiguiente2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSiguiente2ActionPerformed
        index2++;
        aux2 = aux2 + 8;
        try {
             boolean estado;
            if (this.jComboBoxEstado.getSelectedItem().equals("Confirmada")) {
                estado = true;
            }else{
                estado = false;
            }
            this.LlenarTablaDetallesFiltro(this.datePickerInicio.getDateTimePermissive() ,
                    this.datePickerFin.getDateTimePermissive() ,
                    this.txtFolio.getText() ,
                    this.txtNombreProducto.getText() ,
                    estado);
        } catch (NegocioException ex) {
            Logger.getLogger(frmConsultarCompras.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSiguiente2ActionPerformed
    private void AcomodarContenido() throws NegocioException {

        this.pnlFondo.setLayout(new GridBagLayout()); // Permite centrar componentes dentro

        gbc.gridy = 0; // Todos estarán en la misma fila (fila 0), se incrementa para mover a la siguiente fila.
        gbc.insets = new Insets(5, 5, 5, 5); // Margen alrededor del componente
        gbc.fill = GridBagConstraints.HORIZONTAL; // Centrado en la celda
        gbc.weightx = 1.0; // Espacio extra para centrar horizontalmente

        // Columna 1
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH; // Alarga la tabla con el tamaño.
        this.jTableVentas.setModel(this.LlenarTablaInicial());
        JTableHeader header = new JTableHeader(this.jTableVentas.getColumnModel());
        this.pnlFondo.add(header, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jTableVentas, gbc);
        this.jTableVentas.setPreferredSize(new Dimension(750, 750));
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonAtras, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonSiguiente, gbc);
        gbc.gridy++;
        this.jTableProductosVentas.setModel(this.LlenarTablaDetallesInicial());
        JTableHeader header2 = new JTableHeader(this.jTableProductosVentas.getColumnModel());
        this.pnlFondo.add(header2, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jTableProductosVentas, gbc);
        this.jTableProductosVentas.setPreferredSize(new Dimension(750, 750));
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonAtras2, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonSiguiente2, gbc);
        gbc.gridy++;

//         Columna 2
        gbc.gridx = 2;
        gbc.gridy = 0;
        this.pnlFondo.add(this.lblEstado, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.txtNombreProducto, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.lblFolio, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.txtFolio, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.lblFechaInicio, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.datePickerInicio, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.lblFechaFin, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.datePickerFin, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.lblEstado, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jComboBoxEstado, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonConfirmar, gbc);
        gbc.gridy++;
        this.pnlFondo.add(this.jButtonCancelar, gbc);
        gbc.gridy++;
        this.jButtonCancelar.setVisible(false);
        this.pnlFondo.add(this.jButtonVolver, gbc);
        gbc.gridy++;

    }

    public int contarPaginas(int nPaginas) {
        int totalPaginas = (int) Math.ceil((double) nPaginas / 8);
        return totalPaginas;
    }
    // Metodo para llenar la tabla de Compras al iniciar.

    public DefaultTableModel LlenarTablaInicial() throws NegocioException {

        DefaultTableModel model = (DefaultTableModel) this.jTableVentas.getModel();
        model.setRowCount(0); // Limpiar todas las filas existentes en la tabla
        for (int i = 0; i < 5; i++) {
            model.addRow(new Object[]{
                "Busque",
                0,
                0.0,
                "para mostrarlo"});
        }
        return model;
    }
    // Metodo para llenar la tabla de DetallesCompras al iniciar.

    public DefaultTableModel LlenarTablaDetallesInicial() throws NegocioException {

        DefaultTableModel model = (DefaultTableModel) this.jTableProductosVentas.getModel();
        model.setRowCount(0); // Limpiar todas las filas existentes en la tabla
        for (int i = 0; i < 5; i++) {
            model.addRow(new Object[]{
                "Busque",
                0,
                0.0,
                0.0,
                "Algo"});
        }
        return model;
    }
    // Metodo para llenar la tabla de ventas.

    public DefaultTableModel LlenarTablaFiltro(LocalDateTime fechaInicio, LocalDateTime fechaFin, String folio, String nombreProducto, boolean estado) throws NegocioException {
        max = this.contarPaginas(ControlGUI.getInstancia().obtenerVentaFiltros(fechaInicio, fechaFin, folio, nombreProducto, estado).size());
        List<VentaDTO> ventasObtenidas = this.calcularFiltros(fechaInicio, fechaFin, folio, nombreProducto, estado);
        this.ocultarBotones();
        //Tabla
        DefaultTableModel model = (DefaultTableModel) this.jTableVentas.getModel();
        model.setRowCount(0); // Limpiar todas las filas existentes en la tabla

        try {
            for (int i = 0; i < ventasObtenidas.size(); i++) {
                String estados;
                VentaDTO venta = ventasObtenidas.get(i);
                if (venta.getEstado() == true) {
                    estados = "Confirmada";
                } else {
                    estados = "Cancelada";
                }
                model.addRow(new Object[]{
                    venta.getFolio(),
                    venta.getFechaHora(),
                    venta.getTotal(),
                    estados
                });

            }
            return model;
        } catch (NullPointerException np) {
            JOptionPane.showMessageDialog(rootPane, "No se encontro ninguna venta");
            throw new NullPointerException("No se encontro ninguna venta");
        }

    }
    // Metodo para llenar la tabla de detalles de ventas.
    public DefaultTableModel LlenarTablaDetallesFiltro(LocalDateTime fechaInicio, LocalDateTime fechaFin, String folio, String nombreProducto, boolean estado) throws NegocioException {
        List<DetalleVentaDTO> detalles = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) this.jTableProductosVentas.getModel();
        model.setRowCount(0); // Limpiar todas las filas existentes en la tabla
        List<VentaDTO> ventasObtenidas = this.calcularFiltros(fechaInicio, fechaFin, folio, nombreProducto, estado);
        for (int i = 0; i < ventasObtenidas.size(); i++) {
            for (int j = 0; j < ventasObtenidas.get(i).getDetalles().size(); j++) {
                DetalleVentaDTO detalle = ventasObtenidas.get(i).getDetalles().get(j);
                detalles.add(detalle);
            }
        }
        max2 = this.contarPaginas(detalles.size());
        this.ocultarBotones2();
        List<DetalleVentaDTO> detallesFiltrados = this.calcularDetallesFiltros(detalles);
        
        for (int i = 0; i < detallesFiltrados.size(); i++) {
            String nombreAux="";
            if (ControlGUI.getInstancia().obtenerProductoPorID(detallesFiltrados.get(i).getIdProducto()) == null) {
                nombreAux = "No especificado";
            }else{
                nombreAux = ControlGUI.getInstancia().obtenerProductoPorID(detallesFiltrados.get(i).getIdProducto()).getNombre();
            }
            model.addRow(new Object[]{
                    nombreAux,
                    detallesFiltrados.get(i).getCantidad(),
                    detallesFiltrados.get(i).getDescuento(),
                    ControlGUI.getInstancia().obtenerProductoPorID(detallesFiltrados.get(i).getIdProducto()).getPrecioVenta(),
                    ventasObtenidas.get(i).getFolio()
                });
        }
        return null;
    }
    public void ocultarBotones() {

        if (index == max) {
            this.jButtonSiguiente.setVisible(false);

        } else {
            this.jButtonSiguiente.setVisible(true);

        }

        if (index == min) {
            this.jButtonAtras.setVisible(false);

        } else {
            this.jButtonAtras.setVisible(true);

        }
    }

    public void ocultarBotones2() {

        if (index2 == max2) {
            this.jButtonSiguiente2.setVisible(false);

        } else {
            this.jButtonSiguiente2.setVisible(true);

        }

        if (index2 == min2) {
            this.jButtonAtras2.setVisible(false);

        } else {
            this.jButtonAtras2.setVisible(true);
        }
    }

    public List<VentaDTO> calcularFiltros(LocalDateTime fechaInicio, LocalDateTime fechaFin, String folio, String nombreProducto, boolean estado) throws NegocioException {
        List<VentaDTO> ventasObtenidasFiltro = ControlGUI.getInstancia().obtenerVentaFiltros(fechaInicio, fechaFin, folio, nombreProducto, estado);
        List<VentaDTO> detalles = new ArrayList<>();
        try {
            detalles.add(ventasObtenidasFiltro.get(aux - 1));
            detalles.add(ventasObtenidasFiltro.get(aux));
            detalles.add(ventasObtenidasFiltro.get(aux + 1));
            detalles.add(ventasObtenidasFiltro.get(aux + 2));
            detalles.add(ventasObtenidasFiltro.get(aux + 3));
            detalles.add(ventasObtenidasFiltro.get(aux + 4));
            detalles.add(ventasObtenidasFiltro.get(aux + 5));
            detalles.add(ventasObtenidasFiltro.get(aux + 6));
        } catch (IndexOutOfBoundsException e) {
            throw new IndexOutOfBoundsException("Se paso del rango pero no pasa nada :D ");

        } finally {
            return detalles;
        }

    }

    public List<DetalleVentaDTO> calcularDetallesFiltros(List<DetalleVentaDTO> lista) throws NegocioException {
        List<DetalleVentaDTO> detalles = new ArrayList<>();
        try {
            detalles.add(lista.get(aux2 - 1));
            detalles.add(lista.get(aux2));
            detalles.add(lista.get(aux2 + 1));
            detalles.add(lista.get(aux2 + 2));
            detalles.add(lista.get(aux2 + 3));
            detalles.add(lista.get(aux2 + 4));
            detalles.add(lista.get(aux2 + 5));
            detalles.add(lista.get(aux2 + 6));
        } catch (IndexOutOfBoundsException e) {
            throw new IndexOutOfBoundsException("Se paso del rango pero no pasa nada :D ");

        } finally {
            return detalles;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DateTimePicker datePickerFin;
    private com.github.lgooddatepicker.components.DateTimePicker datePickerInicio;
    private javax.swing.JButton jButtonAtras;
    private javax.swing.JButton jButtonAtras2;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonConfirmar;
    private javax.swing.JButton jButtonSiguiente;
    private javax.swing.JButton jButtonSiguiente2;
    private javax.swing.JButton jButtonVolver;
    private javax.swing.JComboBox<String> jComboBoxEstado;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneProductos;
    private javax.swing.JTable jTableProductosVentas;
    private javax.swing.JTable jTableVentas;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblFechaFin;
    private javax.swing.JLabel lblFechaInicio;
    private javax.swing.JLabel lblFolio;
    private javax.swing.JLabel lblNombreProducto;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlFondo;
    private javax.swing.JPanel pnlTitulo;
    private javax.swing.JTextField txtFolio;
    private javax.swing.JTextField txtNombreProducto;
    // End of variables declaration//GEN-END:variables

}
